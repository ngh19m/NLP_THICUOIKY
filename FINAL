{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7571209,"sourceType":"datasetVersion","datasetId":4407647}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install sklearn_crfsuite","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:36:49.345463Z","iopub.execute_input":"2024-06-23T15:36:49.345846Z","iopub.status.idle":"2024-06-23T15:37:01.376440Z","shell.execute_reply.started":"2024-06-23T15:36:49.345814Z","shell.execute_reply":"2024-06-23T15:37:01.375432Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Requirement already satisfied: sklearn_crfsuite in /opt/conda/lib/python3.10/site-packages (0.5.0)\nRequirement already satisfied: python-crfsuite>=0.9.7 in /opt/conda/lib/python3.10/site-packages (from sklearn_crfsuite) (0.9.10)\nRequirement already satisfied: scikit-learn>=0.24.0 in /opt/conda/lib/python3.10/site-packages (from sklearn_crfsuite) (1.2.2)\nRequirement already satisfied: tabulate>=0.4.2 in /opt/conda/lib/python3.10/site-packages (from sklearn_crfsuite) (0.9.0)\nRequirement already satisfied: tqdm>=2.0 in /opt/conda/lib/python3.10/site-packages (from sklearn_crfsuite) (4.66.4)\nRequirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.24.0->sklearn_crfsuite) (1.26.4)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.24.0->sklearn_crfsuite) (1.11.4)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.24.0->sklearn_crfsuite) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.24.0->sklearn_crfsuite) (3.2.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport shutil\nfrom string import punctuation\nfrom sklearn.model_selection import train_test_split\n\nimport sklearn_crfsuite","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.378823Z","iopub.execute_input":"2024-06-23T15:37:01.379133Z","iopub.status.idle":"2024-06-23T15:37:01.384362Z","shell.execute_reply.started":"2024-06-23T15:37:01.379104Z","shell.execute_reply":"2024-06-23T15:37:01.383339Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"class FeatureExtractor:\n    def extract(self, sentences):\n        X = [self.sentence2features(s) for s in sentences]\n        y = [self.sentence2lables(s) for s in sentences]\n        return X, y\n\n    def sentence2features(self, s):\n        return [self.word2features(s, i) for i in range(len(s))]\n\n    def sentence2lables(self, s):\n        return [row[-1] for row in s]\n\n    def word2features(self, s, i):\n        word = s[i][0]\n        features = {\n            'bias'       : 1.0,\n            '[0]'        : word,\n            '[0].lower'  : word.lower(),\n            '[0].istitle': word.istitle(),\n            '[0].isdigit': word.isdigit(),\n            '[0].ispunct': word in punctuation,\n        }\n        if i > 0:\n            word1 = s[i - 1][0]\n            tag1 = s[i - 1][1]\n            features.update({\n                '[-1]'        : word1,\n                '[-1].lower'  : word1.lower(),\n                '[-1].istitle': word1.istitle(),\n                '[-1].isdigit': word1.isdigit(),\n                '[-1].ispunct': word1 in punctuation,\n                '[-1][1]'     : tag1,\n                '[-1,0]'      : \"%s %s\" % (word1, word),\n            })\n            if i > 1:\n                word2 = s[i - 2][0]\n                tag2 = s[i - 2][1]\n                features.update({\n                    '[-2]'        : word2,\n                    '[-2].lower'  : word2.lower(),\n                    '[-2].istitle': word2.istitle(),\n                    '[-2].isdigit': word2.isdigit(),\n                    '[-2].ispunct': word2 in punctuation,\n                    '[-2][1]'     : tag2,\n                    '[-2,-1]'     : \"%s %s\" % (word2, word1),\n                    '[-2,-1][1]'  : \"%s %s\" % (tag2, tag1),\n                })\n                if i > 2:\n                    tag3 = s[i - 3][1]\n                    features.update({\n                        '[-3][1]'    : tag3,\n                        '[-3,-2][1]' : \"%s %s\" % (tag3, tag2),\n                    })\n        else:\n            features['BOS'] = True\n\n        if i < len(s) - 1:\n            word1 = s[i + 1][0]\n            features.update({\n                '[+1]'        : word1,\n                '[+1].lower'  : word1.lower(),\n                '[+1].istitle': word1.istitle(),\n                '[+1].isdigit': word1.isdigit(),\n                '[+1].ispunct': word1 in punctuation,\n                '[0,+1]'      : \"%s %s\" % (word, word1)\n            })\n            if i < len(s) - 2:\n                word2 = s[i + 2][0]\n                features.update({\n                    '[+2]'        : word2,\n                    '[+2].lower'  : word2.lower(),\n                    '[+2].istitle': word2.istitle(),\n                    '[+2].isdigit': word2.isdigit(),\n                    '[+2].ispunct': word2 in punctuation,\n                    '[+1,+2]'     : \"%s %s\" % (word1, word2)\n                })\n        else:\n            features['EOS'] = True\n        return features","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.385668Z","iopub.execute_input":"2024-06-23T15:37:01.385957Z","iopub.status.idle":"2024-06-23T15:37:01.404542Z","shell.execute_reply.started":"2024-06-23T15:37:01.385929Z","shell.execute_reply":"2024-06-23T15:37:01.403662Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"class CRF_NER(sklearn_crfsuite.CRF):\n    def save(self, model_filename):\n        destination = model_filename\n        source = self.modelfile.name\n        shutil.copy(src=source, dst=destination)\n\n    @staticmethod\n    def load(model_filename):\n        model = CRF_NER(model_filename=model_filename)\n        return model","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.405698Z","iopub.execute_input":"2024-06-23T15:37:01.406050Z","iopub.status.idle":"2024-06-23T15:37:01.416371Z","shell.execute_reply.started":"2024-06-23T15:37:01.406021Z","shell.execute_reply":"2024-06-23T15:37:01.415594Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"def _get_tags(sents):\n    tags = []\n    for sent_idx, iob_tags in enumerate(sents):\n        curr_tag = {'type': None, 'start_idx': None,\n                    'end_idx': None, 'sent_idx': None}\n        for i, tag in enumerate(iob_tags):\n            if tag == 'O' and curr_tag['type']:\n                tags.append(tuple(curr_tag.values()))\n                curr_tag = {'type': None, 'start_idx': None,\n                            'end_idx': None, 'sent_idx': None}\n            elif tag.startswith('B'):\n                curr_tag['type'] = tag[2:]\n                curr_tag['start_idx'] = i\n                curr_tag['end_idx'] = i\n                curr_tag['sent_idx'] = sent_idx\n            elif tag.startswith('I'):\n                curr_tag['end_idx'] = i\n        if curr_tag['type']:\n            tags.append(tuple(curr_tag.values()))\n    tags = set(tags)\n    return tags","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.418501Z","iopub.execute_input":"2024-06-23T15:37:01.419010Z","iopub.status.idle":"2024-06-23T15:37:01.426827Z","shell.execute_reply.started":"2024-06-23T15:37:01.418987Z","shell.execute_reply":"2024-06-23T15:37:01.425997Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"def f_measure(y_true, y_pred):\n    tags_true = _get_tags(y_true)\n    tags_pred = _get_tags(y_pred)\n\n    ne_ref = len(tags_true)\n    ne_true = len(set(tags_true).intersection(tags_pred))\n    ne_sys = len(tags_pred)\n    if ne_ref == 0 or ne_true == 0 or ne_sys == 0:\n        return 0\n    p = ne_true / ne_sys\n    r = ne_true / ne_ref\n    f1 = (2 * p * r) / (p + r)\n\n    return f1","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.427701Z","iopub.execute_input":"2024-06-23T15:37:01.427940Z","iopub.status.idle":"2024-06-23T15:37:01.437018Z","shell.execute_reply.started":"2024-06-23T15:37:01.427920Z","shell.execute_reply":"2024-06-23T15:37:01.436114Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def evaluate(model, X_test, y_test):\n    \"\"\"\n    Đánh giá mô hình bằng accuracy, precision, recall, F1-score,\n    và F1-score theo entity.\n    \"\"\"\n    y_pred = model.predict(X_test)\n\n    # Chuyển đổi y_test và y_pred thành dạng danh sách phẳng\n    y_test_flat = [tag for sublist in y_test for tag in sublist]\n    y_pred_flat = [tag for sublist in y_pred for tag in sublist]\n\n    # In báo cáo chi tiết\n    print(classification_report(y_test_flat, y_pred_flat))\n\n    # Tính toán F1-score theo entity\n    f1 = f_measure(y_test, y_pred)\n    print(f\"F1-score theo entity: {f1:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.437954Z","iopub.execute_input":"2024-06-23T15:37:01.438215Z","iopub.status.idle":"2024-06-23T15:37:01.446550Z","shell.execute_reply.started":"2024-06-23T15:37:01.438173Z","shell.execute_reply":"2024-06-23T15:37:01.445786Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def read_data_from_csv(file_path):\n    \"\"\"\n    Đọc dữ liệu từ file CSV và chuyển đổi thành định dạng phù hợp.\n    \"\"\"\n    df = pd.read_csv(file_path, encoding='ISO-8859-1')\n    df['Sentence #'] = df['Sentence #'].ffill()\n    \n    data = []\n    for _, group in df.groupby('Sentence #'):\n        sentence = [(str(row['Word']), row['Tag']) for _, row in group.iterrows()]\n        data.append(sentence)\n    return data","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.447555Z","iopub.execute_input":"2024-06-23T15:37:01.447853Z","iopub.status.idle":"2024-06-23T15:37:01.455989Z","shell.execute_reply.started":"2024-06-23T15:37:01.447831Z","shell.execute_reply":"2024-06-23T15:37:01.455109Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"if __name__ == '__main__':\n    # Đọc dữ liệu từ file CSV\n    data = read_data_from_csv('/kaggle/input/named-entity-recognition-dataset/recognition_data.csv')  \n    # Chia dữ liệu thành tập huấn luyện và kiểm tra (80/20)\n    train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\n\n    # Trích xuất đặc trưng cho tập huấn luyện\n    feature_extractor = FeatureExtractor()\n    X_train, y_train = feature_extractor.extract(train_data)\n\n    # Khởi tạo và huấn luyện mô hình CRF\n    model = CRF_NER(\n        c1=1.0,\n        c2=1e-3,\n        max_iterations=200,\n        all_possible_transitions=True,\n        verbose=True,\n    )\n    model.fit(X_train, y_train)\n    model.save(\"model.crfsuite_1\")\n\n    # Trích xuất đặc trưng cho tập kiểm tra\n    X_test, y_test = feature_extractor.extract(test_data)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T15:37:01.457041Z","iopub.execute_input":"2024-06-23T15:37:01.457370Z","iopub.status.idle":"2024-06-23T15:54:12.829429Z","shell.execute_reply.started":"2024-06-23T15:37:01.457347Z","shell.execute_reply":"2024-06-23T15:54:12.828624Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stderr","text":"loading training data to CRFsuite: 100%|██████████| 38367/38367 [00:32<00:00, 1197.11it/s]\n","output_type":"stream"},{"name":"stdout","text":"\nFeature generation\ntype: CRF1d\nfeature.minfreq: 0.000000\nfeature.possible_states: 0\nfeature.possible_transitions: 1\n0....1....2....3....4....5....6....7....8....9....10\nNumber of features: 1547377\nSeconds required: 6.370\n\nL-BFGS optimization\nc1: 1.000000\nc2: 0.001000\nnum_memories: 6\nmax_iterations: 200\nepsilon: 0.000010\nstop: 10\ndelta: 0.000010\nlinesearch: MoreThuente\nlinesearch.max_iterations: 20\n\nIter 1   time=8.80  loss=1086438.61 active=568795 feature_norm=1.00\nIter 2   time=4.52  loss=822790.52 active=549671 feature_norm=2.71\nIter 3   time=4.47  loss=736394.90 active=437416 feature_norm=2.41\nIter 4   time=9.03  loss=631627.41 active=313082 feature_norm=1.99\nIter 5   time=4.55  loss=588895.01 active=304996 feature_norm=2.27\nIter 6   time=4.55  loss=475388.31 active=273663 feature_norm=4.47\nIter 7   time=4.68  loss=377429.10 active=276683 feature_norm=5.22\nIter 8   time=4.55  loss=339036.91 active=272421 feature_norm=6.32\nIter 9   time=4.61  loss=301617.92 active=268524 feature_norm=7.17\nIter 10  time=4.55  loss=273809.16 active=261093 feature_norm=8.79\nIter 11  time=4.56  loss=244505.58 active=254898 feature_norm=9.92\nIter 12  time=4.54  loss=222330.99 active=245182 feature_norm=11.44\nIter 13  time=4.52  loss=202541.64 active=231633 feature_norm=13.07\nIter 14  time=4.56  loss=179301.69 active=211212 feature_norm=14.65\nIter 15  time=4.59  loss=177149.18 active=178462 feature_norm=17.10\nIter 16  time=4.57  loss=156307.65 active=181221 feature_norm=17.93\nIter 17  time=4.51  loss=150567.03 active=177111 feature_norm=18.68\nIter 18  time=4.48  loss=141516.28 active=165848 feature_norm=20.57\nIter 19  time=4.54  loss=134581.27 active=147619 feature_norm=26.35\nIter 20  time=4.56  loss=119870.11 active=147758 feature_norm=28.82\nIter 21  time=4.62  loss=113332.74 active=147274 feature_norm=30.42\nIter 22  time=4.67  loss=105830.20 active=142053 feature_norm=34.10\nIter 23  time=4.62  loss=97065.82 active=135039 feature_norm=39.99\nIter 24  time=4.71  loss=88441.29 active=130259 feature_norm=44.97\nIter 25  time=4.47  loss=81253.32 active=124301 feature_norm=50.23\nIter 26  time=4.58  loss=75762.81 active=118708 feature_norm=54.80\nIter 27  time=4.48  loss=70550.89 active=111567 feature_norm=60.41\nIter 28  time=4.50  loss=66944.37 active=104803 feature_norm=65.72\nIter 29  time=4.56  loss=63700.02 active=97987 feature_norm=70.41\nIter 30  time=4.47  loss=60744.45 active=90754 feature_norm=75.19\nIter 31  time=4.53  loss=57546.97 active=82827 feature_norm=82.04\nIter 32  time=4.52  loss=55223.60 active=77589 feature_norm=87.84\nIter 33  time=4.55  loss=53859.82 active=76049 feature_norm=90.12\nIter 34  time=4.54  loss=52134.58 active=71876 feature_norm=94.28\nIter 35  time=4.61  loss=50738.05 active=66452 feature_norm=99.04\nIter 36  time=4.50  loss=49443.73 active=64180 feature_norm=102.25\nIter 37  time=4.55  loss=48656.83 active=61955 feature_norm=105.28\nIter 38  time=4.47  loss=47758.63 active=61116 feature_norm=109.19\nIter 39  time=4.55  loss=46883.94 active=59687 feature_norm=113.08\nIter 40  time=4.51  loss=46100.75 active=57321 feature_norm=116.19\nIter 41  time=4.46  loss=45419.08 active=53177 feature_norm=119.75\nIter 42  time=4.58  loss=44904.83 active=51467 feature_norm=121.84\nIter 43  time=4.48  loss=44383.87 active=48619 feature_norm=125.35\nIter 44  time=4.45  loss=43981.92 active=46275 feature_norm=127.78\nIter 45  time=4.42  loss=43604.56 active=43923 feature_norm=131.29\nIter 46  time=4.67  loss=43272.74 active=41727 feature_norm=134.50\nIter 47  time=4.55  loss=42995.71 active=40328 feature_norm=137.11\nIter 48  time=4.55  loss=42767.00 active=38959 feature_norm=139.27\nIter 49  time=4.57  loss=42553.06 active=37917 feature_norm=141.56\nIter 50  time=4.54  loss=42387.60 active=36914 feature_norm=142.94\nIter 51  time=4.43  loss=42256.45 active=36120 feature_norm=144.17\nIter 52  time=4.38  loss=42123.73 active=35201 feature_norm=145.38\nIter 53  time=4.51  loss=42007.86 active=34438 feature_norm=146.66\nIter 54  time=4.58  loss=41905.62 active=34052 feature_norm=147.27\nIter 55  time=4.44  loss=41802.48 active=33207 feature_norm=148.04\nIter 56  time=4.52  loss=41709.99 active=32542 feature_norm=148.68\nIter 57  time=4.54  loss=41632.69 active=32055 feature_norm=149.38\nIter 58  time=4.46  loss=41565.06 active=31690 feature_norm=149.66\nIter 59  time=4.63  loss=41498.72 active=31380 feature_norm=150.08\nIter 60  time=4.54  loss=41434.39 active=30850 feature_norm=150.44\nIter 61  time=4.53  loss=41375.77 active=30581 feature_norm=150.93\nIter 62  time=4.50  loss=41321.00 active=30228 feature_norm=151.17\nIter 63  time=4.42  loss=41274.74 active=29795 feature_norm=151.51\nIter 64  time=4.54  loss=41225.72 active=29472 feature_norm=151.82\nIter 65  time=4.46  loss=41183.95 active=29123 feature_norm=152.26\nIter 66  time=4.47  loss=41142.11 active=28835 feature_norm=152.58\nIter 67  time=4.41  loss=41107.17 active=28546 feature_norm=152.97\nIter 68  time=4.60  loss=41071.88 active=28227 feature_norm=153.18\nIter 69  time=4.51  loss=41039.36 active=28097 feature_norm=153.43\nIter 70  time=4.49  loss=41008.47 active=27820 feature_norm=153.62\nIter 71  time=4.50  loss=40982.77 active=27566 feature_norm=154.04\nIter 72  time=4.47  loss=40949.71 active=27333 feature_norm=154.23\nIter 73  time=4.50  loss=40921.21 active=27224 feature_norm=154.52\nIter 74  time=4.44  loss=40897.10 active=27053 feature_norm=154.67\nIter 75  time=4.63  loss=40872.97 active=26895 feature_norm=154.95\nIter 76  time=4.55  loss=40853.76 active=26715 feature_norm=155.16\nIter 77  time=4.54  loss=40831.99 active=26571 feature_norm=155.54\nIter 78  time=4.59  loss=40805.09 active=26468 feature_norm=155.72\nIter 79  time=4.49  loss=40785.36 active=26382 feature_norm=156.01\nIter 80  time=4.51  loss=40766.30 active=26278 feature_norm=156.17\nIter 81  time=4.49  loss=40751.10 active=26167 feature_norm=156.48\nIter 82  time=4.59  loss=40729.98 active=26062 feature_norm=156.62\nIter 83  time=4.46  loss=40715.90 active=25974 feature_norm=156.89\nIter 84  time=4.52  loss=40699.42 active=25878 feature_norm=157.05\nIter 85  time=4.48  loss=40689.20 active=25783 feature_norm=157.35\nIter 86  time=4.47  loss=40667.47 active=25701 feature_norm=157.50\nIter 87  time=4.48  loss=40658.83 active=25635 feature_norm=157.76\nIter 88  time=4.48  loss=40638.18 active=25552 feature_norm=157.92\nIter 89  time=4.64  loss=40631.74 active=25463 feature_norm=158.17\nIter 90  time=4.65  loss=40611.25 active=25381 feature_norm=158.33\nIter 91  time=4.66  loss=40605.86 active=25329 feature_norm=158.57\nIter 92  time=4.53  loss=40585.80 active=25288 feature_norm=158.71\nIter 93  time=4.52  loss=40581.39 active=25248 feature_norm=158.93\nIter 94  time=4.53  loss=40563.08 active=25186 feature_norm=159.08\nIter 95  time=4.46  loss=40558.85 active=25103 feature_norm=159.30\nIter 96  time=4.57  loss=40540.47 active=25040 feature_norm=159.43\nIter 97  time=4.47  loss=40537.55 active=25016 feature_norm=159.64\nIter 98  time=4.54  loss=40520.37 active=24977 feature_norm=159.78\nIter 99  time=4.47  loss=40518.05 active=24910 feature_norm=159.97\nIter 100 time=4.59  loss=40500.81 active=24877 feature_norm=160.10\nIter 101 time=4.51  loss=40499.52 active=24821 feature_norm=160.28\nIter 102 time=4.64  loss=40482.01 active=24800 feature_norm=160.40\nIter 103 time=4.62  loss=40480.64 active=24759 feature_norm=160.58\nIter 104 time=4.58  loss=40464.06 active=24710 feature_norm=160.69\nIter 105 time=4.61  loss=40461.89 active=24658 feature_norm=160.85\nIter 106 time=4.61  loss=40446.63 active=24640 feature_norm=160.95\nIter 107 time=4.54  loss=40443.95 active=24613 feature_norm=161.11\nIter 108 time=4.61  loss=40429.50 active=24587 feature_norm=161.21\nIter 109 time=4.53  loss=40428.17 active=24543 feature_norm=161.38\nIter 110 time=4.53  loss=40412.61 active=24500 feature_norm=161.47\nIter 111 time=4.48  loss=40412.11 active=24482 feature_norm=161.65\nIter 112 time=4.55  loss=40396.10 active=24431 feature_norm=161.75\nIter 113 time=4.56  loss=40395.81 active=24406 feature_norm=161.91\nIter 114 time=4.47  loss=40380.40 active=24358 feature_norm=162.00\nIter 115 time=4.65  loss=40379.34 active=24321 feature_norm=162.17\nIter 116 time=4.46  loss=40364.38 active=24286 feature_norm=162.25\nIter 117 time=4.67  loss=40363.63 active=24221 feature_norm=162.42\nIter 118 time=4.50  loss=40348.95 active=24196 feature_norm=162.50\nIter 119 time=4.58  loss=40347.81 active=24149 feature_norm=162.64\nIter 120 time=4.45  loss=40334.12 active=24137 feature_norm=162.74\nIter 121 time=4.54  loss=40333.15 active=24101 feature_norm=162.89\nIter 122 time=4.53  loss=40319.31 active=24052 feature_norm=162.96\nIter 123 time=4.44  loss=40316.96 active=24024 feature_norm=163.08\nIter 124 time=4.62  loss=40305.04 active=23977 feature_norm=163.13\nIter 125 time=4.51  loss=40303.71 active=23945 feature_norm=163.26\nIter 126 time=4.50  loss=40291.05 active=23902 feature_norm=163.32\nIter 127 time=4.60  loss=40289.23 active=23861 feature_norm=163.44\nIter 128 time=4.61  loss=40276.43 active=23827 feature_norm=163.49\nIter 129 time=4.66  loss=40274.92 active=23760 feature_norm=163.60\nIter 130 time=4.45  loss=40263.33 active=23731 feature_norm=163.64\nIter 131 time=4.49  loss=40262.12 active=23678 feature_norm=163.74\nIter 132 time=4.53  loss=40251.12 active=23647 feature_norm=163.79\nIter 133 time=4.50  loss=40250.21 active=23608 feature_norm=163.88\nIter 134 time=4.51  loss=40239.44 active=23572 feature_norm=163.94\nIter 135 time=4.50  loss=40237.97 active=23556 feature_norm=164.01\nIter 136 time=4.51  loss=40228.04 active=23525 feature_norm=164.06\nIter 137 time=4.51  loss=40226.59 active=23503 feature_norm=164.14\nIter 138 time=4.55  loss=40217.18 active=23463 feature_norm=164.18\nIter 139 time=4.44  loss=40216.39 active=23413 feature_norm=164.27\nIter 140 time=4.47  loss=40206.75 active=23389 feature_norm=164.32\nIter 141 time=4.47  loss=40205.93 active=23370 feature_norm=164.39\nIter 142 time=4.55  loss=40197.30 active=23331 feature_norm=164.43\nIter 143 time=4.50  loss=40196.81 active=23317 feature_norm=164.50\nIter 144 time=4.60  loss=40188.26 active=23281 feature_norm=164.54\nIter 145 time=4.45  loss=40188.12 active=23266 feature_norm=164.60\nIter 146 time=4.41  loss=40179.53 active=23228 feature_norm=164.63\nIter 147 time=4.50  loss=40177.95 active=23201 feature_norm=164.68\nIter 148 time=4.56  loss=40171.07 active=23189 feature_norm=164.71\nIter 149 time=4.42  loss=40169.94 active=23177 feature_norm=164.77\nIter 150 time=4.72  loss=40162.03 active=23147 feature_norm=164.80\nIter 151 time=4.85  loss=40161.02 active=23108 feature_norm=164.85\nIter 152 time=4.59  loss=40153.40 active=23067 feature_norm=164.89\nIter 153 time=4.47  loss=40152.12 active=23038 feature_norm=164.93\nIter 154 time=4.75  loss=40145.49 active=22999 feature_norm=164.96\nIter 155 time=4.76  loss=40144.08 active=22978 feature_norm=165.00\nIter 156 time=4.46  loss=40137.27 active=22941 feature_norm=165.02\nIter 157 time=4.97  loss=40135.74 active=22923 feature_norm=165.06\nIter 158 time=4.76  loss=40129.68 active=22900 feature_norm=165.08\nIter 159 time=4.66  loss=40127.92 active=22866 feature_norm=165.12\nIter 160 time=5.23  loss=40121.92 active=22837 feature_norm=165.15\nIter 161 time=4.77  loss=40120.34 active=22828 feature_norm=165.20\nIter 162 time=4.95  loss=40114.50 active=22786 feature_norm=165.23\nIter 163 time=4.88  loss=40113.35 active=22768 feature_norm=165.29\nIter 164 time=5.02  loss=40107.52 active=22751 feature_norm=165.31\nIter 165 time=4.88  loss=40106.63 active=22708 feature_norm=165.36\nIter 166 time=4.52  loss=40101.14 active=22676 feature_norm=165.38\nIter 167 time=4.54  loss=40100.33 active=22667 feature_norm=165.43\nIter 168 time=4.63  loss=40095.08 active=22634 feature_norm=165.45\nIter 169 time=4.71  loss=40093.89 active=22627 feature_norm=165.50\nIter 170 time=4.75  loss=40089.12 active=22605 feature_norm=165.52\nIter 171 time=4.70  loss=40088.13 active=22599 feature_norm=165.57\nIter 172 time=4.75  loss=40083.31 active=22573 feature_norm=165.59\nIter 173 time=4.66  loss=40082.56 active=22534 feature_norm=165.64\nIter 174 time=4.71  loss=40077.84 active=22489 feature_norm=165.66\nIter 175 time=4.62  loss=40077.09 active=22463 feature_norm=165.71\nIter 176 time=4.88  loss=40072.74 active=22438 feature_norm=165.73\nIter 177 time=4.83  loss=40071.71 active=22433 feature_norm=165.77\nIter 178 time=4.90  loss=40067.80 active=22410 feature_norm=165.78\nIter 179 time=4.94  loss=40066.95 active=22388 feature_norm=165.82\nIter 180 time=4.91  loss=40063.09 active=22362 feature_norm=165.83\nIter 181 time=4.90  loss=40062.38 active=22357 feature_norm=165.87\nIter 182 time=4.73  loss=40058.37 active=22340 feature_norm=165.88\nIter 183 time=4.58  loss=40057.37 active=22307 feature_norm=165.92\nIter 184 time=4.60  loss=40053.96 active=22275 feature_norm=165.93\nIter 185 time=4.65  loss=40053.18 active=22263 feature_norm=165.97\nIter 186 time=4.49  loss=40049.14 active=22239 feature_norm=165.97\nIter 187 time=4.53  loss=40048.34 active=22225 feature_norm=166.02\nIter 188 time=4.46  loss=40044.98 active=22207 feature_norm=166.03\nIter 189 time=4.52  loss=40044.08 active=22199 feature_norm=166.07\nIter 190 time=4.56  loss=40040.72 active=22181 feature_norm=166.08\nIter 191 time=4.50  loss=40039.92 active=22186 feature_norm=166.12\nIter 192 time=4.54  loss=40036.82 active=22163 feature_norm=166.14\nIter 193 time=4.57  loss=40036.04 active=22144 feature_norm=166.18\nIter 194 time=4.54  loss=40032.72 active=22117 feature_norm=166.21\nIter 195 time=4.65  loss=40031.72 active=22118 feature_norm=166.26\nIter 196 time=4.57  loss=40028.62 active=22083 feature_norm=166.27\nIter 197 time=4.49  loss=40027.80 active=22077 feature_norm=166.32\nIter 198 time=4.51  loss=40024.78 active=22051 feature_norm=166.33\nIter 199 time=4.57  loss=40024.26 active=22034 feature_norm=166.37\nIter 200 time=4.53  loss=40021.30 active=22010 feature_norm=166.39\nL-BFGS terminated with the maximum number of iterations\nTotal seconds required for training: 923.170\n\nStoring the model\nNumber of active features: 22010 (1547377)\nNumber of active attributes: 14592 (1332378)\nNumber of active labels: 17 (17)\nWriting labels\nWriting attributes\nWriting feature references for transitions\nWriting feature references for attributes\nSeconds required: 0.021\n\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report  # Thêm dòng này\n# Đánh giá mô hình\nevaluate(model, X_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T16:07:12.162602Z","iopub.execute_input":"2024-06-23T16:07:12.163525Z","iopub.status.idle":"2024-06-23T16:07:19.943680Z","shell.execute_reply.started":"2024-06-23T16:07:12.163486Z","shell.execute_reply":"2024-06-23T16:07:19.942798Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n       B-art       0.85      0.50      0.63        94\n       B-eve       0.97      0.81      0.88        70\n       B-geo       0.91      0.95      0.93      7558\n       B-gpe       0.98      0.94      0.96      3142\n       B-nat       0.71      0.50      0.59        40\n       B-org       0.93      0.80      0.86      4151\n       B-per       0.95      0.90      0.93      3400\n       B-tim       0.98      0.93      0.95      4077\n       I-art       0.96      0.83      0.89        84\n       I-eve       0.97      0.94      0.95        65\n       I-geo       0.98      0.98      0.98      1462\n       I-gpe       0.89      0.73      0.80        33\n       I-nat       0.90      0.69      0.78        13\n       I-org       0.98      0.98      0.98      3394\n       I-per       0.97      0.99      0.98      3406\n       I-tim       0.95      0.95      0.95      1251\n           O       0.99      1.00      1.00    177590\n\n    accuracy                           0.99    209830\n   macro avg       0.93      0.85      0.88    209830\nweighted avg       0.99      0.99      0.99    209830\n\nF1-score theo entity: 0.9087\n","output_type":"stream"}]}]}